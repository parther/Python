# 参考：
七周成为数据分析师 http://dwz.cn/6pfCw6
数据分析师的必读书单 http://dwz.cn/6GU0fo

=== 
# EXCEL
Excel函数篇 http://dwz.cn/73KamR
Excel技巧篇 http://dwz.cn/73Kbm6
数据可视化 http://dwz.cn/73KgHz
===
# 初级数据分析师
excel:
谁说菜鸟不会数据分析
excel 重要的是学会搜索
vlookup SQL中的join，python中的merge
数据透视表 SQL中的group，python中的pivot_table
合并单元格，拒绝花哨，表一原始数据，表二加工数据，表三图表
数据类型 timestamp date string int bigint char factor float
数组 及python中的数组
函数及对应的参数
编码 utf-8 ASCII delimiter

excel 图表和BI:
字不如表，表不如图
数据分析最终都是要兜售自己的观点和结论，不能落地的的数据分析是没有价值的
excel 可以完成大部分的图表。但进阶的图表需要用到编程绘制，而且更有效率
BI（商业智能）更长于交互和报表，效率更高相比于excel一键解决
可视化分析，解释已经发生和正在发生的数据，未来发生的数据是数据挖掘的方向
# 数据分析思维
结构化的分析思维，俗称金字塔思维
常用基本方法 SMART 5W2H SWOT 4P 
基本分析的方法论 
指标为先，好的指标是比率或者比率，好的分析应该对比和关联

sql:
row_number convert contact
expalin 优化，sql工作原理，数据类型，io
处理百万级数据的效率
SQL 是数据分析的核心技能，EXCEL 到 sql 是处理数据的一大进步
围绕select展开
进阶 row_number convert contact substr
expalin 优化，sql工作原理，数据类型，io

统计学:
统计学是数据分析的基础
基本目标是 了解基础的含义，不被数据欺骗了

业务能力:
一切为业务服务
良好的业务沟通能力是数据分析的基础能力

python:
是否具备编程能力，是初级分析师与高级分析师的分水岭
掌握 编程语言如python 可以事半功倍，数据挖掘，可视化，爬虫都需要
R入门简单，统计方面操作优势明显。但大数据处理能力较弱，学习曲线陡峭，入门难？
python万能胶水语言，各种包足以应付数据分析的任务

=
# 参考：
Excel 函数篇 https://zhuanlan.zhihu.com/p/23345231
Excel 技巧篇 https://zhuanlan.zhihu.com/p/23618955    
实战篇 汇总招聘数据 https://zhuanlan.zhihu.com/p/24084300
===

# 实战累计
判断一组数据的重复次数
ifcount
从指定单元格开始选取某列
ctrl + shift + 箭头

===

# 技巧
Excel技巧篇 http://dwz.cn/73Kbm6
=
# 函数
# 清洗处理类函数
     清理脏数据，很多数据不能直接拿来分析
     
     trim 对应 trim strip 消除单元格字符两边的空格
     concatenate 对应concat 合并单元格数据，另一种用&
     replace 对应 replace replace 替换单元格数据中的字符
     substitute 同replace替换。substitute 指定字符 全部替换，replace 指定位置替换字符
     left ，right ，mid 其中mid对应sql中的substr 截取单元格中指定位置的字符
     len 获取单元格中数据的字符长度
     find 对应sql find_in_set, python 同名函数。 寻找单元格中的数据某个字符出现的位置，常与 left等结合完成问题提取
     search 类似于find，但不区分大小，并且支持某些通配符
     text 将数值转化为指定格式的文本格式，合并文本时很有用
     round 将数值四舍五入，并且指定小数点位数

# 关联匹配类函数
     目的是减少此类函数的使用，多表关联和行列比对时用的比较多
     
     lookup 是查找函数，给定所在列的值，查找指定列对应行的值
     由于使用 二分法匹配，数据必须 升序排列。不支持精确匹配
     vlookup 是查找函数，给定所在区域首列的值，查找区域内指定列对应行的值
     使用 二分法匹配，近似查询时首列需升序排列。支持精确查找，精确查找首列不需要升序排列
     index 查找函数，返回区域指定行指定列的数据。通常与match配合使用
     match 返回指定数据的位置，一般是行
     row 返回所在行
     column 返回所在列
     offset 返回相对某区域偏移位置的值

# 计算统计类函数
     sum sumif sumifs  求和函数
     sumproduct 求积求和函数
     count countif countifs 统计个数
     rank 返回指定数据在列中的排名
     rand randbetween 返回随机数
     round 返回指定小数点位数的数字
     int 返回整数
     subtotal 返回数据的基本统计量，包括均值方差等
     correl 返回相关系数
     mod 取余数 
     
# 时间序列函数
     专门处理时间格式及转换，主要用于金融财务等数据分析
     
     year month day 返回日期中的 年 月日
     date 将年月日合并，转换为具体日期
     today 返回当前日期
     now 返回当前时间
     weekday 返回当前日期 星期几
     weeknum 返回当年 的 第几周
     dateif 返回 两个日期的 时间差
     
# 逻辑运算函数
     if
     and
     or
     is 系列，返回布尔值。iserror，isna，istext， is_BLAN 常用，与if搭配使用

===
https://www.r-project.org/
r语言实战
R语言数据分析与挖掘实战
===
# 问题
函数和方法的区别
# 其他
像Python一样优雅的用R https://zhuanlan.zhihu.com/p/27592751
单引号，双引号是一样的
class(a) 查看数据类型
<- 与 = 没有区别，但推荐<-
1:4 打印1到4
查看函数的用法 help(apply)
===
R：
是什么：专门用于统计分析的编程语言
具体可以做什么：数据清洗，数据分析，可视化，建模，编程能力
目的是为了提高工作效率
循环，判断，函数 是提高效率，完成复杂任务的必要条件
包 专门应付某任务的函数集合
# 
函数 mf <- function(x){x+5} mf(1)
判断语句
循环语句
#
数据 - 数据读取和存储 - 数据处理
=
数据类型：
数值型 numerical
字符 character
逻辑值 logical
-
数据结构：
常量
向量vector v <- c(1,2,3,'a') c是combine的意思，生成vector，相当于Python的list
o
数组array a <- array(1:30,c(3,5,2)) 数据类型必须一致
矩阵matrix m <- matrix(1:50,nrow=10,ncol=5) 二维 数据类型必须一致
m[1,c(1,2)] 查询第1行1和2列数据 数据类型必须一致
dataframe 二维 按列数据类型可以不一致 最常用的 d$col 选取指定的列
list 可以存放任意类型的数据
# 
dataframe是主要的数据结构
过滤 - 组合 - 去重 -（多表操作）-抽样 - 聚合统计 - 建模
apply
包：
reshape
dplyr
data.table
===
combine[, c(1, 4)])
=
抽取数据
向服务器数据库写数据
require(RPostgreSQL) 
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,host="192.168.0.10",port="5432",dbname="database1",user="postgres",password="root")
dbWriteTable(con, "table_name", data) 
从数据库读取数据
require(RPostgreSQL) 
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,host="192.168.0.10",port="5432",dbname="database1",user="postgres",password="root")
postgresqlpqExec(con, "SET client_encoding = 'gbk'") # 解决数据显示乱码的问题
con_query <- dbSendQuery(con, "select * from table_name") 
data <- dbFetch(con_query, n = -1)
=
从表格读取数据
df <- read.csv("data.csv", header = T, stringsAsFactors = F)
=
抽样
df_sample <- df[sample(nrow(df),10000),]
=
预处理
数据清洗
1 去重去空
unique(df)
df[!duplicated(df$x1), ]
ddply(df, .(x1,x2), tail, n = 1)
-
df[(df$x2 != ''), ] 
-
df[df$x1 < 2,]
df[-which(df$x1 < 2),] 
2 规范字符和去异常
去除特定字符
gsub("[a-zA-Z]", "", df$x1) 替换
取出特定字符
strsplit(df[,x1], "/", fixed = TRUE) 分列
3 转换数据类型
as.Date(df$x1)
数据变换
1 列和列操作
2 多表操作
特征列 - 多列处理 - 单列处理
特征列
删减
变换
