import pandas as pd
from pandas import Series, DataFrame
import numpy as np
import matplotlib.pyplot as plt
% matplotlib inline

f = '数据源\\CDNOW_master.txt'
d = pd.read_csv(f, sep='\s+',engine='python',names=['user_id','order_date','order_quantity','order_amount'])
d['order_date'] = pd.to_datetime(d['order_date'], format='%Y%m%d')

# 客单价
# d.groupby('user_id').sum().describe()

# 复购率
d['order_month'] = d['order_date'].values.astype('datetime64[M]')
d['order_month'] = d['order_month'].astype('str')
pivot_d = d.pivot_table(values='order_amount', index='user_id', columns='order_month',aggfunc='count')
repurchase_pivot_d = pivot_d.applymap(lambda x : 1 if x>1 else 0 if x==1 else None )
repurchase_rate = repurchase_pivot_d.sum()/repurchase_pivot_d.count()
plt.figure(figsize=(10,4))
# repurchase_rate.plot()

# 回购率
return_pivot_d = pivot_d.applymap(lambda x: 1 if x>0 else 0)
def return_purchase(x):
    l=[]
    for i in range(return_pivot_d.shape[1]-1):
        if x[i]==1:
            if x[i+1]==1:
                l.append(1)
            else:
                l.append(0)
        else:
            l.append(None)
    l.append(None)
    return l

return_pivot_d2 = return_pivot_d.apply(return_purchase, axis=1)
return_rate = return_pivot_d2.sum()/return_pivot_d2.count()
plt.figure(figsize=(10,4))
# return_rate.plot()

# 用户的消费时间节点（用户初次消费和最后消费时间）
d.groupby('user_id')['order_month'].min().value_counts().sort_index()
d.groupby('user_id')['order_month'].max().value_counts().sort_index()

# 用户消费周期（两次消费间隔平均时间）
g_d = d.groupby('user_id')
user_id2 = g_d['order_amount'].count()[g_d['order_amount'].count()>1]
d2 = d.set_index('user_id').loc[user_id2.index] # 筛选消费超过1次的用户
d2 = d2.reset_index()

g_d2 = d2.groupby('user_id')
diff = g_d2.apply(lambda x:x['order_date'].diff().dt.days)
# pd.DataFrame(diff).reset_index()['order_date'].describe()

# 用户的生命周期
(d.groupby('user_id')['order_date'].max() - d.groupby('user_id')['order_date'].min()).describe()

# 用户分层
def group_user(x):
    l = []
    for i in range(18):
        if x[i]==0:
            if len(l)>0:
                if l[i-1]=='unreg':
                    l.append('unreg')
                else:
                    l.append('unactive')
            else:
                l.append('unreg')
        else:
            if len(l)>0:
                if l[i-1]=='unreg':
                    l.append('new')
                elif l[i-1]=='unactive':
                    l.append('return')
                else:
                    l.append('active')
            else:
                l.append('new')
    return l

group_user_d = return_pivot_d.apply(group_user,axis=1)
count_group_user_d = group_user_d.replace('unreg',np.NaN).apply(lambda x : x.value_counts()).fillna(0)
rate_of_active = (count_group_user_d.loc['active'] + count_group_user_d.loc['return'])/count_group_user_d.sum() # 活跃和回流占比
plt.figure(figsize=(10,4))
# rate_of_active.plot()


