# 问题：P232
from statsmodels.tsa.stattools import adfuller as ADF
FutureWarning: The pandas.core.datetools module is deprecated and will be removed in a future version. 
Please use the pandas.tseries module instead.
from pandas.core import datetools
http://pandas.pydata.org/pandas-docs/version/0.19.0/whatsnew.html

lagnum = 12 残差延迟个数
jungbox_p2 = (jungbox_p < 0.05).sum() # p值小于0.05，认为是非白噪声,白噪声是相加的值

# 
BIC最小的p值和q值为：0、1 有时候为1、1 与数据有关；与BIC编写代码是否正确有关；代码的反应速度
显著性水平 显著性水平是估计总体参数落在某一区间内，可能犯错误的概率，用α表示
final_d = final_d.iloc[:len(final_d)-5] # 不使用最后5个数据是为了拿来预测
LB 统计量 Ljung-Box LB检验，判断其是否是高斯白噪声 https://www.zhihu.com/question/22863169/answer/22937500
try except: 存在部分报错，所以用try来跳过报错而尝试except的内容，比如忽略参数错误
arima.predict(typ = 'levels') typ = 'levels'

d.plot() 改变y轴范围 http://blog.csdn.net/ccy950903/article/details/50688449
d.plot()
plt.axis([0,7,0,13]) 

极大似然比方法
https://www.zhihu.com/question/20447622/answer/23902715
http://blog.csdn.net/yanqingan/article/details/6125812
利用已知的样本结果，反推最有可能（最大概率）导致这样结果的参数值


应用系统负载分析与磁盘容量预测 http://blog.csdn.net/y1535766478/article/details/77982675
基本步骤：平稳性检验 - 白噪声检验 - 模型识别，确认模型的p、q参数 - 模型检验 - 模型应用
时间列须为 时间格式，时间由前到后排序
差分 本行减去上一行的差值

from statsmodels.tsa.stattools import adfuller as ADF
[p] = acorr_ljungbox(s, lags = 1)[1]  将单个数字从array中提取出来
为了保证数据信息提取完毕，需要保证原始数据非白噪声，差分后为白噪声

hessian matrix 海赛矩阵
inversion 反转
l.append(ARIMA(s, (i,1,j)).fit().bic) 只能接全数字或者是str
l2.extend(l1) # 将元素散开
pd.DataFrame(l2).stack() 堆积起来，也就是去掉列
d.plot(yticks=[10,11,12],xlim=-1) xlim原点的位置  yticks只显示轴上的某些点

===

# 预处理 检验平稳性和白噪声
import numpy as np
import pandas as pd
from pandas import Series, DataFrame

path = '数据源\\图书配套数据、代码\\chapter11\\demo\\data\\discdata.csv' 
f = open(path, encoding = 'utf-8')
d = pd.read_csv(f)

used_d = d[d['TARGET_ID'] == 184].copy()
used_d['COLLECTTIME'] = pd.to_datetime(used_d['COLLECTTIME'])

g_d = used_d.groupby('COLLECTTIME')
c_d = pd .DataFrame(g_d.apply(lambda x : x['VALUE'].iloc[0]),columns=['CWXT_DB:184:C:\\'])
d_d = pd .DataFrame(g_d.apply(lambda x : x['VALUE'].iloc[1]),columns=['CWXT_DB:184:D:\\'])
final_d = pd.concat([c_d,d_d],axis=1)

test_d = final_d.iloc[len(final_d)-5:]
train_d = final_d.iloc[:len(final_d)-5] # 不使用最后5个数据
s = train_d['CWXT_DB:184:D:\\']
stable_s = s.diff(1).dropna()

from statsmodels.tsa.stattools import adfuller as ADF
diff_x = 0
adf = ADF(s)
while adf[1] >= 0.05: # adf[1]为p值，检验是否小于0.05，若不小于则进行差分
    diff_x = diff_x + 1
    adf = ADF(s.diff(diff_x).dropna())
print('通过 %s 阶差分后序列平稳，p 值为：%s' %(diff_x, adf[1]))

from statsmodels.stats.diagnostic import acorr_ljungbox
[p] = acorr_ljungbox(s, lags = 1)[1]
if p < 0.05: # p < 0.05 为非白噪声序列
    [p] = acorr_ljungbox(s.diff(1).dropna(), lags = 1)[1]
    print(u'原始序列非白噪声序列，1阶差分后序列为白噪声序列，对应的p值为：%s' %p)
else:  
    print(u'原始序列为白噪声序列，对应的p值为：%s' %p)
    
=

# 建模。定阶，识别模型
1 图像识别
from statsmodels.graphics.tsaplots import plot_acf  
plot_acf(stable_s1)

from statsmodels.graphics.tsaplots import plot_pacf
plot_pacf(stable_s1)

2 BIC检验
from statsmodels.tsa.arima_model import ARIMA
pmax = int(len(stable_s)/10) #一般阶数不超过length/10
qmax = int(len(stable_s)/10) #一般阶数不超过length/10
bic_matrix = [] #bic矩阵

for i in range(pmax+1): # for 只与对应的循坏对象有关 循环需要从内往外看吗
    l = []
    for j in range(qmax+1):
        try:
            l.append(ARIMA(s, (i,1,j)).fit().bic)
        except:
            l.append(None)
    bic_matrix.append(l)
    
# (p,q) = pd.DataFrame(bic_matrix).stack().idxmin()
# (p,q)

=

# 模型检验，残差是否为白噪声序列，保证有用信息已经提取完毕
arima = ARIMA(s, (p, 1, q)).fit() #建立并训练模型
s_pred = arima.predict(typ = 'levels') # 反过来预测s的值，缺少s的第一个值，因为前面dropna了
pred_error = (s_pred - s).dropna() # 残差序列中如果不是白噪声，说明信息未提取完整，需修改模型

from statsmodels.stats.diagnostic import acorr_ljungbox
lagnum = 12 # 延迟12期的白噪声
jungbox_p = acorr_ljungbox(pred_error, lags = lagnum)[1] # 返回的是数组，第二个为检验值
jungbox_p2 = (jungbox_p < 0.05).sum() # p值小于0.05，认为是非白噪声,白噪声是相加的值
if jungbox_p2 > 0:
    print(u'模型ARIMA(%s,1,%s)不符合白噪声检验'% (p,q))
else:
    print(u'模型ARIMA(%s,1,%s)符合白噪声检验'% (p,q))
    
=

# 模型应用和评价
model = ARIMA(s, (0,1,1)).fit() #建立ARIMA(1, 1, 1)模型

compare_d = pd.DataFrame(test_d[['CWXT_DB:184:D:\\']])
compare_d['predict'] = model.forecast(5)[0] # model.forecast(5)返回预测结果，标准误差，置信区间
compare_d.columns = ['real','predict']
compare_d = compare_d/10**6 # 数据换成GB

abs_ = (compare_d['real'] - compare_d['predict']).abs()
mae_ = abs_.mean() # mae 平均绝对误差
rmse_ = ((abs_**2).mean())**0.5 # rmse 均方根误差
mape_ = (abs_/compare_d['real']).mean() # mape

print(u'平均绝对误差为：%0.4f，\n均方根误差为：%0.4f，\n平均绝对百分误差为：%0.6f。' %(mae_, rmse_, mape_))


