平稳性检验 - 差分运算 - 白噪声检验 - 模型识别
BIC 定阶，确认模型的p、q参数 - 白噪声检验
模型参数估计 - 预测 - 检验

为了验证序列中有用的信息是否被提取完毕了，需要对序列进行白噪声检验
模型识别。采用极大似然比方法 进行模型的参数估计。采用BIC对模型定阶，确定pq参数
时间列须为 时间格式，时间由前到后排序
差分 本行减去上一行的差值

The pandas.core.datetools module is deprecated
from statsmodels.tsa.stattools import adfuller as ADF
from pandas.core import datetools
===

# 平稳性检验
import numpy as np
import pandas as pd
from pandas import Series, DataFrame

path = '数据源\\图书配套数据、代码\\chapter11\\demo\\tmp\\data_processed.csv'
f = open(path, encoding = 'utf-8')
d = pd.read_csv(f)
d2 = d.copy()
d2['COLLECTTIME'] = pd.to_datetime(d2['COLLECTTIME'])
d3 = d2.sort_values('COLLECTTIME').set_index('COLLECTTIME')
d3.head()

from statsmodels.tsa.stattools import adfuller as ADF
diff_x = 0
adf = ADF(d4['CWXT_DB:184:D:\\'])
while adf[1] > 0.05:
    diff_x = diff_x + 1
    adf = ADF(d4['CWXT_DB:184:D:\\'].diff(diff_x).dropna())

print(u'原始序列经过%s阶差分后归于平稳，p值为%s' %(diff_x, adf[1]))
===

# 检验白噪声
from statsmodels.stats.diagnostic import acorr_ljungbox

[[lb], [p]] = acorr_ljungbox(d4['CWXT_DB:184:D:\\'], lags = 1)
if p < 0.05:
    print(u'原始序列为非白噪声序列，对应的p值为：%s' %p)
else:
    print(u'原始该序列为白噪声序列，对应的p值为：%s' %p)

[[lb], [p]] = acorr_ljungbox(d4['CWXT_DB:184:D:\\'].diff().dropna(), lags = 1)
if p < 0.05:
    print(u'一阶差分序列为非白噪声序列，对应的p值为：%s' %p)
else:
    print(u'一阶差分该序列为白噪声序列，对应的p值为：%s' %p)
===

# 模型识别
d4= d3.iloc[:len(d3)-5]
s = d4['CWXT_DB:184:D:\\']
from statsmodels.tsa.arima_model import ARIMA
#定阶
pmax = int(len(s)/10) #一般阶数不超过length/10
qmax = int(len(s)/10) #一般阶数不超过length/10
bic_matrix = [] #bic矩阵
for p in range(pmax+1):
  tmp = []
  for q in range(qmax+1):
    try: #存在部分报错，所以用try来跳过报错。
      tmp.append(ARIMA(s, (p,1,q)).fit().bic)
    except:
      tmp.append(None)
  bic_matrix.append(tmp)

bic_matrix = pd.DataFrame(bic_matrix) #从中可以找出最小值
p,q = bic_matrix.stack().idxmin() #先用stack展平，然后用idxmin找出最小值位置。
print(u'BIC最小的p值和q值为：%s、%s' %(p,q))
===

# 模型检验
lagnum = 12 #残差延迟个数
from statsmodels.tsa.arima_model import ARIMA #建立ARIMA(0,1,1)模型
arima = ARIMA(s, (0, 1, 1)).fit() #建立并训练模型
s_pred = arima.predict(typ = 'levels') #预测
pred_error = (s_pred - s).dropna() #计算残差

from statsmodels.stats.diagnostic import acorr_ljungbox #白噪声检验
lb, p= acorr_ljungbox(pred_error, lags = lagnum)
h = (p < 0.05).sum() #p值小于0.05，认为是非白噪声。
if h > 0:
  print(u'模型ARIMA(0,1,1)不符合白噪声检验')
else:
  print(u'模型ARIMA(0,1,1)符合白噪声检验')
===

# 模型评价
#参数初始化
file = '数据源\\图书配套数据、代码\\chapter11\\demo\\data\\predictdata.xls'
data = pd.read_excel(file)

#计算误差
abs_ = (data[u'预测值'] - data[u'实际值']).abs()
mae_ = abs_.mean() # mae
rmse_ = ((abs_**2).mean())**0.5 # rmse
mape_ = (abs_/data[u'实际值']).mean() # mape

print(u'平均绝对误差为：%0.4f，\n均方根误差为：%0.4f，\n平均绝对百分误差为：%0.6f。' %(mae_, rmse_, mape_))
