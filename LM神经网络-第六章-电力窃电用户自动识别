# 问题：    
1 Using Theano backend.
WARNING (theano.configdefaults): g++ not available, if using conda: `conda install m2w64-toolchain`
2 ValueError: Invalid argument "metric" passed to K.function with Theano backend
This error means that you are running Keras version 0 (e.g. 0.3.2) but running code that was written for Keras version 1. 
You can upgrade to Keras 1, or remove metrics=['accuracy'] from the function call to model.compile()
net.compile(loss = 'binary_crossentropy', optimizer = 'adam')
3 d.as_matrix() d.as_matrix 的区别 一般d.as_matrix()
4 plt.colorbar() 
5 保存模型有什么用
 
#
修改Keras.jason 解决backend 问题
import math
1 math.floor(2.3) 向前取整
2 math.ceil(2.3) 向后取整 
3 round(2.3) 四舍五入
Sequential model The simplest type of model  a linear stack of layers
https://keras.io/#getting-started-30-seconds-to-keras
信号的正向传播和误差的逆向传播两个过程组成
训练样本需为array类型
matshow Plot a matrix or array as an image http://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.matshow.html?
a = array([[124,  10],[  6,  92]] a[0,1] 显示0行1列

===
代码
import numpy as np
import pandas as pd
from pandas import Series, DataFrame

f = '数据源\\图书配套数据、代码\\chapter6\\demo\\data\\model.xls'
model_f = '数据源\\图书配套数据、代码\\chapter6\\demo\\tmp\\net.model' #构建的神经网络模型存储路径
d = pd.read_excel(f)

from random import shuffle # 数据打散，建立训练样本和测试样本
m_d_a = d.as_matrix()
shuffle(m_d_a)

p = 0.8
train_a = m_d_a[:int(len(m_d_a)*p)] #int(len(m_d_a)*p需为整数，训练集
test_a = m_d_a[int(len(m_d_a)*p):] # 测试集

# LM神经网络模型
from keras.models import Sequential # Sequential 线性叠层，组织分层
from keras.layers import Dense,Activation # 导入神经网络层函数、激活函数

model = Sequential()
model.add(Dense(input_dim=3, units=10)) # 输入层3个输入特征值，中间层10个中间节点
model.add(Activation('relu')) # 中间（隐藏）层使用 rule 函数，快速
model.add(Dense(input_dim=10, units=1)) # 10个中间节点，输出层1个节点
model.add(Activation('sigmoid')) # 输出层函数使用sigmoid函数，因为所求的y值在0到1之间，题目是分类模型
model.compile(loss='binary_crossentropy', optimizer='adam') # 编译模型，损失函数，求解方法

model.fit(train_a[:,0:3], train_a[:,3:], epochs = 1000, batch_size=30) # epochs训练次数，batch_size每批训练数据的大小
predict_result = model.predict_classes(train_a[:,0:3]) # 预测结果
model.save_weights(model_f) #保存模型

def cm_plot(y, yp): # 混淆矩阵函数
    from sklearn.metrics import confusion_matrix
    cm = confusion_matrix(y, yp)
    plt.matshow(cm, cmap=plt.cm.Greens) 
    plt.colorbar() 
    for x in range(len(cm)): 
        for y in range(len(cm)):
            plt.annotate(cm[x,y], xy=(x, y), horizontalalignment='center', verticalalignment='center')
            
cm_plot(train_a[:,3:], predict_result) # 显示混淆矩阵

=
 
# 构建ROC曲线
from sklearn.metrics import roc_curve #导入ROC曲线函数
predict_result = model.predict(test_a[:,:3]).reshape(len(test_a))
fpr, tpr, thresholds = roc_curve(test_a[:,3], predict_result, pos_label=1)
plt.plot(fpr, tpr, linewidth=2, label = 'ROC of LM') #作出ROC曲线
plt.xlabel('False Positive Rate') #坐标轴标签
plt.ylabel('True Positive Rate') #坐标轴标签
plt.ylim(0,1.05) #边界范围
plt.xlim(0,1.05) #边界范围
plt.legend(loc=4) #图例
plt.show() #显示作图结果


