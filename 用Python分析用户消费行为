# http://dwz.cn/6tu4AK

# 问题
\s+表示匹配任意空白
pandas中有专门的时间序列方法tseries
plot.hist hist
apply axis status_amount_pd2.replace('unreg',np.NaN).apply(pd.value_counts,axis=0) 以行为索引和以列为索引 0以列为索引
fillna
concat
for name,group in grouped
复购率的意义

#
d = pd.read_csv(f, names=columns,engine='python', sep = '\s+') sep = '\s+'表示分隔符 \s+表示匹配任意空白
d2['order_date'] = pd.to_datetime(d['order_date'], format='%Y%m%d')
d2['month'] = d2['order_date'].values.astype('datetime64[M]') 只显示月份
d2.plot.scatter(y = 'order_products', x ='order_amount') 散点图表示方法
数据透视表
np.NaN None
applymap针对DataFrame里的所有数据 counts_pd2 = counts_pd.applymap(lambda x : 1 if x>1 else None if x==0 else 0)
lambda没有elif的用法
在运算中，None 当成了0处理，计数时不处理
life_s.dt.days[life_s.dt.days>0].mean() 将days转换为数字
留存率也是消费分析领域的经典应用。它指用户在第一次消费后，有多少比率进行第二次消费
和回流率的区别是留存倾向于计算第一次消费，并且有多个时间窗口
pivot_retention_trans = pivot_retention.fillna(0).applymap(lambda x: 1 if x>0 else 0) applymap 作用于每个数据
for name,group in grouped:  name是分组值，第二个循环对象group，是分组聚合后的结果
s.shift(1) 偏移函数，整个函数向下移动,和excel上的offset差不多
Python的优势就在于快速和灵活，远比Excel和SQL快
基本统计量与分布结合起来看
复购率的定义是在某时间窗口内消费两次及以上的用户在总消费用户中占比
回购率是某一个时间窗口内消费的用户，在下一个时间窗口仍旧消费的占比。回购率代表忠诚度
新客指第一次消费，老客指时间窗口内有过消费也称活跃用户
不活跃用户则是时间窗口内没有消费过的老客
回流用户是在上一个窗口中没有消费，而在当前时间窗口内有过消费的老客
以上的时间窗口都是按月统计

===
数据：CDNow网站的用户购买明细
目的：根据CDNow网站的用户购买明细，分析用户的消费行为
分析思路：
原始数据并未提供分析目的要求的行为数据，需通过已知的数据构建指标。目的是为了分析用户的消费行为，故采用维度分析法，从特定的角度和层面分析数据
步骤：
以用户和月份分组，分析销量和消费金额
消费的时间节点
复购率，回购率分析
用户分层
用户生命周期和消费周期



