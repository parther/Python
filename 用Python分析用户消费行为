# http://dwz.cn/6tu4AK
商家 - 分析 - 用户消费行为
为什么：形成运营策略，提升销量
分析是什么：分析是思维过程，目的是为了解决问题；分析是动词，可以理解为找答案（预测），找原因，找方法
用户消费行为是什么：5W1H
who - 用户分层
when - 消费时间节点；消费周期
where
what - 消费金额；复购率和回购率；用户生命周期
why
how

#　问题
d['order_date'].values.astype('datetime64[D]') 返回的数据类型为 dtype='datetime64[ns]

d['order_month'] = d['order_date'].astype('int')
TypeError: cannot astype a datetimelike from [datetime64[ns]] to [int32]

回购率是什么意思，与复购率的区别
stack()

面积图

# 
d.groupby('user_id').describe() 与 d.describe() 的表现形式不一样
方差是与均值的平均距离，方差越大表示数据波动越大
浅谈重复购买率：关于提升重复购买率的几点思考 http://www.woshipm.com/operate/790907.html
复购率：某时间窗口内消费两次及以上的用户占总消费用户的比例
意义：代表用户的忠诚度，复购率越高忠诚度越高

d['order_date'].values.astype('datetime64[M]') 并没有改变d['order_date']的数据类型, 只是提取数据的月份
d['order_month'].astype('str') 改变了d['order_date']的数据类型

pivot_d.applymap(lambda x : 1 if x>1 else 0 if x==1 else None ) else 0 if x==1连在一起用 包含的关系

len(d) d.count() count不计算空值
help(d.count) 除非內建函数，否则查询函数的意义都需要跟上属性d

回购率：在下一个时间窗口有消费的人数占本时间窗口总消费人数的比例
意义：也代表用户的忠诚度，类似于消费用户的留存率

g_d 和 d 的切片方式完全不一样，g_d需要用apply，不能直接使用iloc。条件筛选也不一样

group_user_d.replace('unreg',np.NaN) 和 group_user_d.replace('unreg',None) 只能是使用前一种
\s+表示匹配任意空白
\ 在编程语言中一般是转义功能
pandas中有专门的时间序列方法tseries
plot.hist hist
apply axis status_amount_pd2.replace('unreg',np.NaN).apply(pd.value_counts,axis=0) 以行为索引和以列为索引 0以列为索引
fillna
pd.concat
for name,group in grouped
复购率的意义 忠诚度
代码运行速度太慢 64位
三个月作为时间窗口统计

#
d = pd.read_csv(f, names=columns,engine='python', sep = '\s+') sep = '\s+'表示分隔符 \s+表示匹配任意空白
d2['order_date'] = pd.to_datetime(d['order_date'], format='%Y%m%d')
d2['month'] = d2['order_date'].values.astype('datetime64[M]') 只显示月份
d2.plot.scatter(y = 'order_products', x ='order_amount') 散点图表示方法
数据透视表
np.NaN None
applymap针对DataFrame里的所有数据 counts_pd2 = counts_pd.applymap(lambda x : 1 if x>1 else None if x==0 else 0)
lambda没有elif的用法
在运算中，None 当成了0处理，计数时不处理
life_s.dt.days[life_s.dt.days>0].mean() 将days转换为数字
csdn markdown 设置标题大小，插入TOC代码即可生成目录，代码层级依据标题大小而定

留存率也是消费分析领域的经典应用。它指用户在第一次消费后，有多少比率进行第二次消费
和回流率的区别是留存倾向于计算第一次消费，并且有多个时间窗口
Python的优势就在于快速和灵活，远比Excel和SQL快
基本统计量与分布结合起来看
复购率的定义是在某时间窗口内消费两次及以上的用户在总消费用户中占比
回购率是某一个时间窗口内消费的用户，在下一个时间窗口仍旧消费的占比。回购率代表忠诚度
新客指第一次消费，老客指时间窗口内有过消费也称活跃用户
不活跃用户则是时间窗口内没有消费过的老客
回流用户是在上一个窗口中没有消费，而在当前时间窗口内有过消费的老客

for name,group in grouped:  name是分组值，第二个循环对象group，是分组聚合后的结果
s.shift(1) 偏移函数，整个函数向下移动,和excel上的offset差不多

d2.groupby('user_id')['order_amount','order_products'].sum().plot.hist(subplots=True, figsize=(12,8),bins=30) plot和subplot
d2['month'].astype('str').sort_values().unique() 修改数据类型，series后面直接跟修改函数。unique跟在最后
counts_pd.applymap(lambda x : 1 if x>1 else None if x==0 else 0)  else的用法
MemoryError 换64位吧，超出内存了
===
数据：CDNow网站的用户购买明细
目的：根据CDNow网站的用户购买明细，分析用户的消费行为
分析思路：
原始数据并未提供分析目的要求的行为数据，需通过已知的数据构建指标。目的是为了分析用户的消费行为，故采用维度分析法，从特定的角度和层面分析数据
步骤：
以用户和月份分组，分析销量和消费金额
消费的时间节点
复购率，回购率分析
用户分层
用户生命周期和消费周期



