# 问题：
关联规则代码的理解
多维转1维 a[pd.notnull(a)]
pd.value_counts
d1.apply(lambda x: x.value_counts(), axis=1) 0和1 的效果
关联规则的简易代码
result = result.T.sort_index(level = ['confidence','support'], ascending = False)
能否用类打包多个函数

#
d1.apply(pd.value_counts) d1.apply(lambda x: x.value_counts()) 是一样的效果
'a,b,c'.split(',') 分离str
result = result.T.sort_values(by = ['confidence','support'], ascending = False)

===

# 关联规则
from apriori import * #导入自行编写的apriori函数

dataset_d = discretization_d.apply(lambda x: x.value_counts(), axis=1).fillna(0)
support = 0.059 #最小支持度
confidence = 0.75 #最小置信度
find_rule(dataset_d, support, confidence, ms='---')

=
# apriori.py 的代码

import pandas as pd

def connect_string(x, ms): #自定义连接函数，用于实现L_{k-1}到C_k的连接
    x = list(map(lambda i:sorted(i.split(ms)), x))
    l = len(x[0])
    r = []
    for i in range(len(x)):
        for j in range(i,len(x)):
            if x[i][:l-1] == x[j][:l-1] and x[i][l-1] != x[j][l-1]:
                r.append(x[i][:l-1]+sorted([x[j][l-1],x[i][l-1]]))
    return r

def find_rule(d, support, confidence, ms = u'--'): #寻找关联规则的函数
    result = pd.DataFrame(index=['support', 'confidence']) #定义输出结果
  
    support_series = 1.0*d.sum()/len(d) #支持度序列
    column = list(support_series[support_series > support].index) #初步根据支持度筛选
    k = 0
  
    while len(column) > 1:
        k = k+1
        print(u'\n正在进行第%s次搜索...' %k)
        column = connect_string(column, ms)
        print(u'数目：%s...' %len(column))
        sf = lambda i: d[i].prod(axis=1, numeric_only = True) #新一批支持度的计算函数
    
    #创建连接数据，这一步耗时、耗内存最严重。当数据集较大时，可以考虑并行运算优化。
        d_2 = pd.DataFrame(list(map(sf,column)), index = [ms.join(i) for i in column]).T
    
        support_series_2 = 1.0*d_2[[ms.join(i) for i in column]].sum()/len(d) #计算连接后的支持度
        column = list(support_series_2[support_series_2 > support].index) #新一轮支持度筛选
        support_series = support_series.append(support_series_2)
        column2 = []
    
        for i in column: #遍历可能的推理，如{A,B,C}究竟是A+B-->C还是B+C-->A还是C+A-->B？
            i = i.split(ms)
            for j in range(len(i)):
                column2.append(i[:j]+i[j+1:]+i[j:j+1])
    
        cofidence_series = pd.Series(index=[ms.join(i) for i in column2]) #定义置信度序列
 
        for i in column2: #计算置信度序列
            cofidence_series[ms.join(i)] = support_series[ms.join(sorted(i))]/support_series[ms.join(i[:len(i)-1])]
    
        for i in cofidence_series[cofidence_series > confidence].index: #置信度筛选
            result[i] = 0.0
            result[i]['confidence'] = cofidence_series[i]
            result[i]['support'] = support_series[ms.join(sorted(i.split(ms)))]
  
    result = result.T.sort_values(by = ['confidence','support'], ascending = False)
    print(u'\n结果为：')
  
    return result



