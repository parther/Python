import numpy as np
import pandas as pd
from pandas import Series, DataFram

#参数初始化
discfile = '数据源\\图书配套数据、代码\\chapter5\\demo\\data\\arima_data.xls'
data = pd.read_excel(discfile, index_col = u'日期') # 读取数据，指定日期列为指标，Pandas自动将“日期”列识别为Datetime格式

#时序图
import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] = ['SimHei'] #用来正常显示中文标签
plt.rcParams['axes.unicode_minus'] = False #用来正常显示负号
data.plot()
plt.show()

#自相关图
from statsmodels.graphics.tsaplots import plot_acf
plot_acf(data) # 不需要show（）

#平稳性检测
from statsmodels.tsa.stattools import adfuller as ADF#tsa是数据工具的名称
from datetime import datetime
print(u'原始序列的ADF检验结果为：', ADF(data[u'销量']))
print(u'p值为：', ADF(data[u'销量'])[1])

# 差分后重新检验平稳性
D_data = data.diff().dropna()
D_data.columns = [u'销量差分']

D_data.plot() #时序图
plt.show()

plot_acf(D_data) #自相关图

print(u'差分序列的ADF检验结果为：', ADF(D_data[u'销量差分'])) #平稳性检测
print(u'p值为：', ADF(D_data[u'销量差分'])[1])

# 模型识别
from statsmodels.graphics.tsaplots import plot_pacf
plot_pacf(D_data) # 偏自相关图 

#白噪声检验，ｐ值小于０．０５即可
from statsmodels.stats.diagnostic import acorr_ljungbox
print(u'差分序列的白噪声检验结果为：', acorr_ljungbox(D_data, lags=1)) #返回统计量和p值

# 模型定阶 优化
from statsmodels.tsa.arima_model import ARIMA
data[u'销量'] = data[u'销量'].astype(float) #格式必须是float，才能运用在模型
#定阶
pmax = int(len(D_data)/10) #一般阶数不超过length/10
qmax = int(len(D_data)/10) #一般阶数不超过length/10
bic_matrix = [] #bic矩阵
for p in range(pmax+1):
    tmp = []
    for q in range(qmax+1):
        try: #存在部分报错，所以用try来跳过报错。
            tmp.append(ARIMA(data, (p,1,q)).fit().bic)
        except:
            tmp.append(None)
    bic_matrix.append(tmp)
    
# 找出合适的 p，q
bic_matrix = pd.DataFrame(bic_matrix) 
p,q = bic_matrix.stack().idxmin() #先用stack有点行转列的意思，然后用idxmin索引的最小值
print(u'BIC最小的p值和q值为：%s、%s' %(p,q))

model = ARIMA(data, (p,1,q)).fit() #建立ARIMA(0, 1, 1)模型
model.summary2()
model.forecast(5) #作为期5天的预测，返回预测结果、标准误差、置信区间

