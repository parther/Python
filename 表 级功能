# 存储过程
存储过程是多条mysql语句集合。相当于模块，相当于函数
显示存储过程信息：
show create procedure procedure_orderno4
创建存储过程
delimiter //
create procedure procedure_orderno()
begin
select avg(orderno) as avg_ordersno from orders;
end //
delimiter; 
执行存储过程
call procedure_orderno
创建 含变量存储过程
delimiter //
create procedure procedure_orderno2(
out min_orderno decimal(6,1),
out max_orderno decimal(6,1),
out avg_orderno decimal(6,1)
)
begin
select min(orderno) into min_orderno from orders;
select max(orderno) into max_orderno from orders;
select avg(orderno) into avg_orderno from orders;
end //
delimiter;
赋值给变量，显示输出
call procedure_orderno2(
@min_orderno,
@max_orderno,
@avg_orderno
);
select @min_orderno
创建 输入变量的存储过程
delimiter //
create procedure procedure_orderno3(
out min_orderno decimal(6,1),
in num_id_p int
)
begin
select min(orderno)  from orders where id_p= num_id_p
into min_orderno;
end //
delimiter;
赋值给变量，显示输出
call procedure_orderno3( @min_orderno, 1)
select @min_orderno
创建 输入多个变量的存储过程 
delimiter //
create procedure procedure_orderno4(
in test2_name varchar(20),
in tax_v boolean,
out test2_v_python decimal(6,2)
)
begin
declare tax int default 6;
declare test2_python decimal(6,2);
select sum(python)  from test2 where name= test2_name
into test2_python;
if tax then
select test2_python + (test2_python/100)*tax into test2_v_python;
END IF;
select test2_python into test2_v_python;
end //
delimiter;

删除存储过程
drop procedure procedure_orderno2
 
# 游标 只能运用于存储过程，用于批量显示结果。相当于函数循环
http://blog.csdn.net/liguo9860/article/details/50848216
创建游标
delimiter //
drop procedure if exists StatisticStore2;  
CREATE PROCEDURE StatisticStore2()  
BEGIN
--创建接收游标数据的变量
declare c int;  
declare n varchar(20);
--创建总数变量
declare total int default 0;  
--创建结束标志变量
declare done boolean default false;  
--创建游标
declare cur cursor for select name,count from store where name = 'iphone';  
--指定游标循环结束时的返回值，最后一行时继续执行，游标溢出。当引发not found错误时定义一个continue 的事件，指定这个事件发生时修改done变量的值
declare continue HANDLER for not found set done = true; 
--设置初始值
set total = 0; 
--打开游标
open cur;  
--重复 repeat until
repeat  
--将游标数据传给变量
fetch cur into n,c; 
--判断游标的循环是否结束
if not done then  
set total = total + c;  
--结束判断
until done end repeat;  
--关闭游标
close cur; 
--选择显示结果
select total;   
end //
delimiter; 


# 函数
与存储过程相比，它针对整个数据库而不是单一的表格
新建函数
DROP FUNCTION if exists standardize;
DELIMITER $ # 声明开始和结束符，mysql workbench 里面用的到 
CREATE FUNCTION standardize(x float,y int) 
RETURNS float # 必须returns
BEGIN
DECLARE a float;
SET  a = x/5;
RETURN a+y;
END $
DELIMITER ;
输出函数
select standardize(3.2, 3) 

# 视图
新建视图：
create view personsview2 as 
(
select lastname, id_p from persons
where id_p in 
(select id_p from orders where orderno= 1000)
)
 
# 临时表
新建临时表
create temporary table tem_table
(
id_o int(11) auto_increment not null ,
ordersno varchar(30),
id_p int(11),
birthday date default '2017-5-12',
CONSTRAINT pk_PersonID PRIMARY KEY (Id_o),
constraint FK_sid foreign key (id_p) references persons(id_p)
)
ENGINE = MyISAM DEFAULT CHARSET = gbk

# 事务
创建事务。事务主要用于处理操作量大，复杂度高的数据。将自动提交改为手动提交commit，全满足才能提交。要么完全执行，要么不执行
MyISAM不支持事务，InnoDB支持事务。使用begin，保证commit有效
http://www.cnblogs.com/ymy124/p/3718439.html
http://database.51cto.com/art/201010/229246.htm
创建事务：
delimiter //
begin
update persons set name='peter10' where id_p=2;
savepoint s1;
update persons set id_p=3 where city= 'london';
rollback to savepoint s1;
commit;
// delimiter




