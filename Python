廖雪峰系列 https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000
菜鸟教程 http://www.runoob.com/python3/python3-tutorial.html
编写高质量代码 改善Python程序的91个建议.pdf
利用Python进行数据分析
统计学习方法
吴恩达深度学习

===
逗号后加空格

递归：
一个函数可以在内部调用它本身
从前有座山。。。

s1.isin(s2) 判断元素是在另一个Series中

df.loc[idx[['bar'], con],:] 第一个输入如果是单个字符串也需要加中括号
rolling，若窗口为3，则对包括本元素的前3个元素进行计算
shift，若shift为3，则整个数组向下移动3个单位。diff和shift后相减类似
Offset Aliases 用于频率
http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases
DateOffset Objects 表示频率的增长
http://pandas.pydata.org/pandas-docs/stable/timeseries.html#dateoffset-objects
df.set_index(pd.Index([0,1,2,8,9])) 设置索引

numpy时间类
Datetimes and Timedeltas https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html
Python标准时间类
https://docs.python.org/3/library/datetime.html
pandas时间类
http://pandas.pydata.org/pandas-docs/stable/timeseries.html
http://pandas.pydata.org/pandas-docs/stable/timedeltas.html

time是Python中最基本的时间模块，提供三种时间形式，即时间戳，时间元组、格式化时间
import time
# 时间戳
time.time()
# 时间元组
time.localtime()
# 时间元组转换为字符串
time.asctime( time.localtime())
# 格式化时间元组，将时间元组转换为字符串
time.strftime("%Y-%m-%d", time.localtime())
# 将字符串转换为元组
time.srptime("2018-08-14", "%Y-%m-%d")
import datetime

区别Timedelta和Timestamp
Timedelta('0 days 00:01:00')
Timestamp('2016-08-01 11:11:46')

pyecharts 输入值与对应标签保持一致

loging
https://docs.python.org/3.6/howto/logging.html
https://www.jianshu.com/p/29cb6a535e2d
https://blog.csdn.net/manmanoy/article/details/80903057
import logging
logging.basicConfig(filename='example5.log',level=logging.DEBUG,filemode='w',format='%(asctime)s %(message)s')
s = 0
try:
    print(10 / s)
except Exception as e:
    logging.error(e)

try:
    print(10 / s)
except:
    logging.exception("Exception Logged")

np.percentile df.quantile 都能自定义分位数

stack unstack 一般用于层次化索引，stack将列转为行，unstack正好相反，相当于索引级别的透视表

时间操作 dt.days
https://blog.csdn.net/qq_22238533/article/details/70050748
http://pandas.pydata.org/pandas-docs/stable/api.html#string-handling

df.loc[df['id']==2,:] 筛选条件所在的轴

s.round(2) 将结果的科学计数转换为小数

join 替代+,连接列表里的字符串
http://www.runoob.com/python3/python3-string-join.html

pickle是Python特有的文件存储形式，可以存储任何数据类型，简单载入即可调用
https://www.cnblogs.com/lincappu/p/8296078.html
https://www.cnblogs.com/pannyvan/p/4439308.html

转义和正则匹配一般是反斜杆，路径一般是正斜杠
https://www.cnblogs.com/pxh-phper/p/6231294.html

继承，从父类继承所有属性和方法，省去重写的麻烦
https://www.cnblogs.com/bigberg/p/7182741.html
类可以理解为数据类型，使用type查看，需通过对象来调用

numpy的broadcast机制，对不同维度的数组进行运算，一般用在矩阵，将较小的array“广播”成更大的、可以计算的array

正则三种主要匹配模式
pattern = re.compile('23')
string = '12345623'
pattern.match(string,5).group(0) 从起始位置匹配，返回匹配对象
pattern.search(string,5).group(0) 匹配第1个，返回匹配对象
pattern.findall(string) 匹配所有,返回一个列表
http://www.runoob.com/python3/python3-reg-expressions.html
pattern = re.compile('(?P<id>abc){2}') (?P<id>abc) 表示分组
string = 'abcabc'
http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html

s.value_counts()每个值的个数
s.count 返回非空值的个数
len(s) 返回列表的长度

pandas中表达式连接用& 或 |

布尔值可以作为0或1
s.df['two'].notnull()
s.sum()

np.arange([start,] stop[, step,], dtype=None)

哑变量，将类别型数据转换为数值型数据，用于变量要求为数值型的回归模型，使用get_dum函数实现
https://mp.weixin.qq.com/s/dTTC5WsZd3_bTWdIv0OfcQ

s1 = '中国人'.encode('utf-8')
s2 = b'\xe4\xb8\xad\xe5\x9b\xbd\xe4\xba\xba'.decode('utf-8')
s3 = s1.decode('utf-8')
print(s3)

while与if结合
i = 1
while i:
    i = i+1
    if i>4:
        break
    print(i)

if 后接返回True or False的表达式

continue 指不执行本次条件下的语句
https://www.cnblogs.com/Plynn/p/6344341.html

查看路径下的文件
path = "data/"
os.listdir(path)

ValueError: If using all scalar values, you must pass an index
d = {'id':[6],'product':['apple'],'price':[350]}
df = pd.DataFrame(d)

Python操作MySQL：pymysql和SQLAlchemy
将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。
https://www.cnblogs.com/xuyaping/p/7106443.html

try except：
遇到错误会继续执行代码
try:
    s = 1/0
except Exception as e:
    print(e)

查询、更新、插入、删除
切片类似于这种l[0:2]
sort_index中level参数和multiindex的levels是不一样的
-
字符串脑图 https://woaielf.github.io/2017/06/13/python3-all/#字符串
replace("\xa0", " ")
s[s.str.contains('身份证')].apply(lambda x : (re.findall('\d{15,18}',x)))
使用find定位数字 last_login_time[i].find('录')+2
import re 
re.findall(r'(\d+)&params', s)[0]
"".join(l) 将list转为str

查找指定字符在字符串中第二次出现的位置 
a = [m.start() for m in re.finditer(word, str)]  
s[s.str.contains('身份证')].apply(lambda x : (re.findall('\d{15,18}',x)))

notepad 减少缩进:Shift+Tab v
查看header的方法 审查元素-Ctrl+r刷新-all-name-header
PyCharm http://www.sohu.com/a/130930939_468739
Python中操作mysql的pymysql模块详解 http://www.cnblogs.com/wt11/p/6141225.html
将nan 换成none df_remove_nan = df.where(df.notnull(), None)
df_post[df_post['post_id']==5060943 |df_post['post_id']==6767600] 提示 
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
df[(df.nickname =='退伍军人在上访') | (df.nickname =='准许我上访')] http://bluewhale.cc/2016-08-06/use-pandas-filter-and-sort.html
i.xpath('div[2]/div[2]/div[2]/a[contains(@href, "http://www.tianya.cn/mobile/")]/text()').extract() list无法用[0]还原
只能用"".join(user_id)
筛选30个数据 df[(df.post_id ==5060943) | (df.post_id ==602781)|
df_reply_post[df_reply_post['reply_id'].isin(l)]

pandas文本处理 http://www.cnblogs.com/stream886/p/6021743.html

换行
sql_update = "update user_info set follow_number = %s \
where user_id = %s"

pymysql库的使用 http://www.cnblogs.com/wt11/p/6141225.html

时间格式处理
import time,datetime
# str 转 时间格式
datetime.datetime.strptime('2018-03-12 01:08:10','%Y-%m-%d %H:%M:%S')
# 时间格式 转 str
now = datetime.datetime.now()
now.strftime('%Y-%m-%d %H:%M:%S') 
# 时间差
last_time = (datetime.datetime.now()+datetime.timedelta(days=-1)).strftime('%Y-%m-%d %H:%M:%S')
比较：
a = '2017-10-18 22:17:46' >
b = '2017-10-19 22:17:40'
datetime.datetime.strptime('2018-03-12 01:08:10','%Y-%m-%d %H:%M:%S') > 
datetime.datetime.strptime('2018-03-12 01:08:11','%Y-%m-%d %H:%M:%S')
Python 日期和时间 http://www.runoob.com/python/python-date-time.html

post_url.remove('') 的使用方法 只对list作用

http://www.runoob.com/python/att-string-format.html
print("网站名：{name}, 地址 {url}".format(name="菜鸟教程", url="www.runoob.com"))

.strip('_|.') strip() 只移除字符串头尾指定的字符，中间部分不会移除
replace('df',' ') 将字符替换成空格，''让字符为空消失 aaaassddf'.replace('df',' ')

pandas join 类似于 merge 按照index进行拼接
使用join表组合 https://zhuanlan.zhihu.com/p/28337202
给表格增加行 b_law_1.append(b_law[0:1],ignore_index=True)
插入列 insert
s.str.split('/', expand=True) expand=True返回dataframe
series的字符串处理 https://www.jianshu.com/p/31daa943cd2b
spilt将str变成list

apply 的用法 作用于单列或单行 或所有行或者列
b_law['text'].apply(lambda x:1 if '第一条 ' and '第二条 ' in x else 2 if '一、' and '二、'in x else 3)
apply函数的参数使用 b_law_2['text'].apply(content_2,y=b_law_2) 
https://blog.csdn.net/qq_19528953/article/details/79348929

expand=True str.split(',', expand=True).stack() 将series转成dataframe
Series 使用str进行字符串匹配 https://www.jianshu.com/p/31daa943cd2b

去掉最后一个字符 
string1[:-1]

-
用SQLAlchemy操作数据库 
简单的说，ORM 将数据库中的表与面向对象语言中的类建立了一种对应关系
https://www.cnblogs.com/mrchige/p/6389588.html
廖雪峰的官方网站
-
安装anaconda
是Python数据分析的发行版本，集成大量第三方的包，再也不用担心安装包的问题了 
打开jupyter： anaconda prompt-jupyter notebook
更改jupyter路径： anaconda - cd c:\on -jupyter notebook
安装包：
1 anaconda prompt-anaconda install package_name
2 anaconda navigator
3 pip install
包只会安装最新的

查询工作路径或修改工作路径
import os
os.getcwd()
os.chdir('C:/Users/Administrator/Desktop/python_easy')

print表示输出，只输出一行，默认换行。end表示行后选用哪种制表符
print( 'a', end='\n')
print( 'b', end='\t')
print( 'c', end='')
print( 'd')

yield
http://dwz.cn/6CFZJh
变成迭代器 ，yield 只能在function里面使用

回调函数
把主函数的参数传入另一函数处理 https://en.wikipedia.org/wiki/Callback_(computer_programming)#Python

判断为空
if not a ;if a=='' ;if a 

使用pandas读取csv文件
文件应为英文，方便使用pd.read_csv直接读出，中文名不能直接读出。csv文件的列名尽量使用英文

良好的代码习惯：
"""
Created on Thu Mar  1 11:23:53 2018
@author: ZB
"""

使用func 尽量不要接受两个 return
使用中文序号排序的方法：
https://www.cnblogs.com/appler/archive/2012/02/02/2335832.html
https://segmentfault.com/q/1010000007810240?_ea=1461087

try except 
除了捕捉错误之外，还能够允许错误继续运行代码

if __name__ == '__main__' 的理解
在文件a中写上以上代码后，当文件a中的函数或变量被import到文件b中时，运行文件b时不会运行文件a中被执行的函数
http://blog.konghy.cn/2017/04/24/python-entry-program/ 

python把函数作为参数
def fuc(x,y,fuc)

SyntaxError: invalid or missing encoding declaration for 'c:\\on\\parse_law.py' 
尽量使用notepad，还是编码的问题

被import的py文件需要像普通代码运行一样带上引入的模块
jupyter 性能并不稳定

\u3000\u3000 是两个字符 表示的是空白符

UnboundLocalError: local variable 'province' referenced before assignment 
一般是else未做说明

类的实际应用 如果一个功能所需要的函数较多，建议使用类 两个以上的函数，之间有数据共享，就应该使用类来封装

# 用熵权法计算权重
import pandas as pd
from pandas import DataFrame,Series
import numpy as np
# import re
# df = pd.read_csv('post_list.csv',encoding='utf-8')

a1 = np.random.randint(1,10,size=(5))
a2 = np.random.randint(100,1000,size=(5))
a3 = np.array([1,1,1,1,0.999])

df = pd.DataFrame([a1,a2,a3]).T
df.columns=['x1','x2','x3']

df_std = (df - df.min())/df.max()
pij = df_std/df_std.sum()

ej = -(1/np.log(5)) * (np.log(pij)*pij).sum()
dj = 1 - ej
wj = dj/dj.sum()

score = (pij*wj).sum(axis=1)

# 判断两列是否匹配
import pandas as pd
df_list = pd.read_csv('post_list.csv',encoding='gbk')
df_content = pd.read_csv('post_content.csv',encoding='gbk')
l1 = list(df_list[150:250]['post_id'])
l2 = list(df_content[151:246]['post_id'])
for i in l1:
    if str(i) not in l2:
        print(i)
    else:
        print('yes')
